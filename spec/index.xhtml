<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Specifications in Mocha</title>
  <meta name="generator" content="Mocha &lt;https://mochajs.org/&gt;" />
  <meta name="license" content="MIT" />
  <meta name="copyright" content="&#169; 2016 Kevin Locke &lt;kevin@kevinlocke.name&gt;" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/highlight.js/9.1.0/styles/github.min.css" />
  <style type="text/css">
section section {
  margin-left: 1em;
}
section section section section {
  margin-left: 0;
}
  </style>
</head>
<body>
  <div class="container">
    <section class="suite">
      <h1>OpenApiTransformerPipeline</h1>
      <dl>
        <dt>throws TypeError when called without new</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>assert.throws(
  // eslint-disable-next-line new-cap
  () =&#x3E; OpenApiTransformerPipeline([new SyncTransformer(1)]),
  TypeError,
);</code></pre></dd>
        <dt>throws TypeError when called without arguments</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>assert.throws(
  () =&#x3E; new OpenApiTransformerPipeline(),
  TypeError,
);</code></pre></dd>
        <dt>throws TypeError when called with null</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>assert.throws(
  () =&#x3E; new OpenApiTransformerPipeline(null),
  TypeError,
);</code></pre></dd>
        <dt>throws TypeError when called with non-iterable argument</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>assert.throws(
  () =&#x3E; new OpenApiTransformerPipeline(new SyncTransformer(1)),
  TypeError,
);</code></pre></dd>
        <dt>applies empty Array by returning input unchanged</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline([]);
const input = {};
const result = pipeline.transformOpenApi(input);
assert.strictEqual(result, input);
assert.deepStrictEqual(result, {});</code></pre></dd>
        <dt>applies SyncTransformer Array with non-Promise result</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline([new SyncTransformer(1)]);
const result = pipeline.transformOpenApi({});
assert.deepStrictEqual(result, { &#x27;x-test&#x27;: [1] });</code></pre></dd>
        <dt>applies AsyncTransformer Array with Promise result</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline([new AsyncTransformer(1)]);
return pipeline.transformOpenApi({})
  .then((result) =&#x3E; assert.deepStrictEqual(result, { &#x27;x-test&#x27;: [1] }));</code></pre></dd>
        <dt>applies SyncTransformer Generator with non-Promise result</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline(toGenerator([
  new SyncTransformer(1),
]));
const result = pipeline.transformOpenApi({});
assert.deepStrictEqual(result, { &#x27;x-test&#x27;: [1] });</code></pre></dd>
        <dt>changing Array after constructor has no effect</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const transformers = [];
const pipeline = new OpenApiTransformerPipeline(transformers);
transformers.push(new SyncTransformer(1));
const result = pipeline.transformOpenApi({});
assert.deepStrictEqual(result, {});</code></pre></dd>
        <dt>applies Sync after Async with Promise result</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline([
  new AsyncTransformer(1),
  new SyncTransformer(2),
]);
return pipeline.transformOpenApi({})
  .then((result) =&#x3E; assert.deepStrictEqual(result, { &#x27;x-test&#x27;: [1, 2] }));</code></pre></dd>
        <dt>applies Async after Sync with Promise result</dt>
        <dt>/home/kevin/src/node-projects/openapi-transformer-pipeline/test/index.js</dt>
        <dd><pre><code>const pipeline = new OpenApiTransformerPipeline([
  new SyncTransformer(1),
  new AsyncTransformer(2),
]);
return pipeline.transformOpenApi({})
  .then((result) =&#x3E; assert.deepStrictEqual(result, { &#x27;x-test&#x27;: [1, 2] }));</code></pre></dd>
      </dl>
    </section>
  </div><!-- .container -->

  <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/2.2.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/highlight.js/9.1.0/highlight.min.js"></script>
  <script type="text/javascript">//<![CDATA[
'use strict';
// Adjust the nested heading level to match depth
$('section section h1').each(function() {
  var $this = $(this);
  var depth = Math.min($this.parents('section').length, 6);
  // http://stackoverflow.com/a/30059450/503410
  $this.wrapInner(document.createElement('h' + depth)).children().unwrap();
});

// Make the tests collapsible
var testNum = 0;
$('dt + dd')
  .addClass('collapse')
  .attr('role', 'tabpanel')
  .attr('aria-expanded', 'false')
  .each(function() {
    var $this = $(this);
    var $dt = $this.prev();

    ++testNum;
    var id = 'test' + testNum;
    var idDt = id + '-title';
    var idDd = id + '-desc';

    $dt.attr('id', idDt);
    $this.attr('id', idDd);

    $dt.wrapInner('<a role="button" data-toggle="collapse" href="#' + idDd +
        '" aria-expanded="false" aria-controls="' + idDd + '"></a>')
      .children()
      .collapse();
  });

// Enable syntax highlighting for the code (which is all JavaScript)
hljs.configure({languages: ['javascript']});
hljs.initHighlighting();
//]]></script>
</body>
</html>
